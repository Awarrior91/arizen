# ----------------------------------------------------------------------------------------------------------------------

dist: trusty
osx_image: xcode9.2
language: c
sudo: required

git:
  depth: 10

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=arizen

matrix:
  - os: osx
    env: TARGET_ARCH=x64
  - os: windows
    env: TARGET_ARCH=x64
  - os: linux
    env: CC=clang CXX=clang++ npm_config_clang=1 TARGET_ARCH=x64
    compiler: clang

  include:
    # Linux
    - env: TARGET=aarch64-unknown-linux-gnu CC=clang CXX=clang++ npm_config_clang=1
        compiler: clang
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-gnu

    # OSX
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu

cache:
  directories:
  - node_modules
  - app/node_modules
  - "$HOME/.electron"
  - "$HOME/.cache"

addons:
  apt:
    packages:
    - libgnome-keyring-dev
    - icnsutils

before_install:
  - set -e
  - mkdir -p /tmp/git-lfs && curl -L https://github.com/github/git-lfs/releases/download/v1.2.1/git-lfs-$(["$TRAVIS_OS_NAME" == "linux" ] && echo "linux" || echo "darwin")-amd64-1.2.1.tar.gz | tar -xz -C /tmp/git-lfs --strip-components 1 && /tmp/git-lfs/git-lfs pull
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install --no-install-recommends -y icnsutils graphicsmagick xz-utils; fi

install:
  - nvm install 6
  - npm install electron-builder@next
  - npm install
  - npm prune
  # - sh ci/install.sh
  # - source ~/.cargo/env || true

script:
  - npm run dist
  # - bash ci/script.sh

after_script:
  - set +e

before_deploy:
  # - sh ci/before_deploy.sh

# deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
  #api_key:
  #  secure: A9v3PIzQQ4U08
  #file_glob: true
  #file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  #on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
  #  condition: $TRAVIS_RUST_VERSION = stable
  #  tags: true
  #provider: releases
  #skip_cleanup: true

# cache: cargo
# before_cache:
  # Travis can't cache files that are not readable by "others"
  # - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never